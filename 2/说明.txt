# HTTP网络实践demo
为了实现题目所说的功能，以nodejs为例，我们按照下面的步骤

## 运行hello world
新建hello目录，新建入口文件app.js，参考nodejs官网编写hello world
安装nodejs后，在当前目录执行node app.js，浏览器打开http://127.0.0.1:3000/
可以看到页面显示hello world

## 目录划分
静态资源：新建子目录public存放静态资源，资源可以直接被访问
动态请求：新建子目录routes存放对应动态请求的处理逻辑模块

## 对静态资源的响应逻辑
修改app.js，增加静态资源的响应逻辑
如果访问的url在public有对应的文件，直接返回文件内容，没有就返回404
例如url: http://127.0.0.1:3000/public/main.css，对应文件 /public/main.css
重启nodejs，访问上面url验证

## 对动态的响应逻辑
修改app.js，将动态请求路由（转发）给对应的模块处理
当前项目有2个动态响应模块：登录(/login) 和 首页(/)

## 新建页面和资源文件
编写 /public/login.html 用于登录信息输入
在登录模块校验用户名密码，并返回相应提示

## 静态资源的缓存
这里使用比较文件修改日期的方式来实现缓存逻辑：
在静态资源的返回头加上 Last-Modified，下次浏览器访问同样的url就会带上请求头 if-modified-since，
比较两个时间戳，如果文件没更新的话，直接返回响应码304告诉浏览器即可，无需返回具体文件内容

## 动态请求的session
每个浏览器的访问对应一个session，所以如果浏览器还没对应的sessionID就分配一个。
根据请求的sessionID可以找到对应的session，并存取对应的数据

## 效果验证
1. 启动服务：在hello目录运行  node app
2. 访问首页 http://127.0.0.1:3000，将会看到“未登录”的提示
3. 先打开fiddler或者打开chrome控制台准备查看网络请求，清空浏览器缓存，再访问登录页 http://127.0.0.1:3000/public/login.html
可以看到第一次的返回码是200，刷新再次请求，看到返回码是304
4. 输入帐号sunxen 密码123 登录成功
5. 访问首页 http://127.0.0.1:3000，将会看到“欢迎你，sunxen”的提示
6. 啦啦啦，收工
